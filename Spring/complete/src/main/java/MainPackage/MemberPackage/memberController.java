package MainPackage.MemberPackage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/member") // This means URL's start with /demo (after Application path)
public class memberController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private memberRepository memberRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewMember (@RequestParam String username
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		member n = new member(username,password);
		memberRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/get")
	public @ResponseBody String getMember(@RequestParam String username, @RequestParam String password) {
		
		member n = memberRepository.findDistinctByUsernameAndPassword(username, password);
		
	    return n.getId()+"";
	}
	
	@GetMapping(path="/update")
	public @ResponseBody String updateMember(@RequestParam String username, @RequestParam String newpassword) {
		
		member n = memberRepository.findDistinctByUsername(username);
		n.setPassword(newpassword);
		memberRepository.save(n);
		
	    return n.getPassword();
	}
	
	
	@GetMapping(path="/delete")
	public @ResponseBody String deleteMember(@RequestParam String username, @RequestParam String password) {
		
		member n = memberRepository.findDistinctByUsernameAndPassword(username, password);
	    memberRepository.delete(n);
	    
	    return "Deleted";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<member> getAllMembers() {
		// This returns a JSON or XML with the users
		return memberRepository.findAll();
	}
}
